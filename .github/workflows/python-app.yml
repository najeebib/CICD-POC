name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up SSH for EC2
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Deploy to EC2
      run: |
        echo "$ssh-private-key" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
        set -e
        sudo apt-get update
        sudo apt-get install -y python3-pip python3-venv

        if [ -d "/home/ubuntu/app" ]; then
          echo "App directory exists. Pulling latest changes."
          cd /home/ubuntu/app
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
        else
          echo "App directory does not exist. Cloning repository and setting up environment."
          git clone https://github.com/najeebib/CICD-POC.git /home/ubuntu/app
          cd /home/ubuntu/app
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          sudo apt-get install -y nginx
          sudo tee /etc/nginx/sites-available/fastapi > /dev/null << 'EOL'
        server {
            listen 80;
            server_name _;
        
            location / {
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        EOL
          sudo rm /etc/nginx/sites-enabled/default
          sudo ln -sfn /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/fastapi
          sudo nginx -t && sudo systemctl restart nginx
        fi

        pytest
        if [ $? -eq 0 ]; then
          echo "Tests passed. Restarting FastAPI application."
          pkill -f "uvicorn"
          nohup uvicorn server:app --host 127.0.0.1 --port 8000 &
        else
          echo "Tests failed. Deployment aborted."
        fi  
        EOF
